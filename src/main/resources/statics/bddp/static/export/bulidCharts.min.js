var globalData;
function getGlobalData(url) {
    $.ajax({
        url: "../getJSONDataByUrl",
        type: 'post',
        data: {
            url: url
        },
        dataType: 'json',
        async: true,
        success: function (res) {// 返回数据根据结果进行相应的处理
            globalData = res.list.data;
        }
    });
}

function initTagData(elem) {
    var prop = window[elem.attr("id") + "Prop"];
    var data = prop.data;
    var params = prop.params;
    var other = prop.other;
    // if (data) {

    //   if (other.dataFrom == 1) {
    //     createTagsBox(prop, globalDataBase, elem.parent());
    //     elem.remove();
    //     getProp(currBox, true);
    //     currBox.addClass("box-selected");
    //     layx.destroy('initTagData-layx');
    //   } else {
    //     if (data.link) {
    //       getJSONData(other.dataFrom, data.link, params, function (res) {
    //         createTagsBox(prop, res, elem.parent());
    //         elem.remove();
    //         getProp(currBox, true);
    //         currBox.addClass("box-selected");
    //       });
    //     } else {
    //       layx.msg("连接地址不能为空！", { dialogIcon: 'warn' });
    //     }
    //   }
    // }
}

function createTagsBox(prop, options, charts, callback) {
    switch (prop.type) {
        case "line":
            bulidLineChart(prop, options, charts, callback);
            break;
        case "bar":
            bulidBarChart(prop, options, charts, callback);
            break;
        case "pie":
            bulidPieChart(prop, options, charts, callback);
            break;
        case "radar":
            bulidRadarChart(prop, options, charts, callback);
            break;
        case "tree":
            bulidTreeChart(prop, options, charts, callback);
            break;
        case "treemap":
            bulidTreemapChart(prop, options, charts, callback);
            break;
        case "sunburst":
            bulidSunburstChart(prop, options, charts, callback);
            break;
        case "funnel":
            bulidFunnelChart(prop, options, charts, callback);
            break;
        case "gauge":
            bulidGaugeChart(prop, options, charts, callback);
            break;
        case "boxplot":
            bulidBoxplotChart(prop, options, charts, callback);
            break;
        case "heatmap":
            bulidHeatmapChart(prop, options, charts, callback);
            break;
        case "graph":
            bulidGraphChart(prop, options, charts, callback);
            break;
        case "parallel":
            bulidParallelChart(prop, options, charts, callback);
            break;
        case "sankey":
            bulidsankeyChart(prop, options, charts, callback);
            break;
        case "scatter":
            bulidScatterChart(prop, options, charts, callback);
            break;
        case "map":
            bulidMapChart(prop, options, charts, callback);
            break;
        case "candlestick":
            bulidCandkestickChart(prop, options, charts, callback);
            break;
        case "text":
            bulidTextTag(prop, options, callback);
            break;
        case "table":
            bulidTableTag(prop, charts, callback);
            break;
        case "headtable":
            bulidHeadtable(prop, charts, callback);
            break;
        case "filter-y":
            bulidFilterY(prop, callback);
            break;
        case "filter-ym":
            bulidFilterYM(prop, callback);
            break;
        case "filter-date":
            bulidFilterDate(prop, callback);
            break;
        case "filter-y-rang":
            bulidFilterYRang(prop, callback);
            break;
        case "filter-ym-rang":
            bulidFilterYMRang(prop, callback);
            break;
        case "filter-date-rang":
            bulidFilterDateRang(prop, callback);
            break;
        case "detail-nolabel":
            ebulidDetailNolabel(prop, callback);
            break;
        case "detail":
            ebulidDetail(prop, callback);
            break;
        case "detail-icon":
            ebulidDetailIcon(prop, callback);
            break;
        case "detail-img":
            ebulidDetailImg(prop, callback);
            break;
        case "detail-h":
            ebulidDetailH(prop, callback);
            break;
        case "detail-time":
            ebulidDetailTime(prop, callback);
            break;
        default:
            break;
    }
}

function paramsMap() {
    var url = window.location.href;
    var obj = {};
    var reg = /[?&][^?&]+=[^?&]+/g;
    var arr = url.match(reg);
    if (arr === null) return obj;
    arr.forEach(function (item) {
        var tempArr = item.substring(1).split('=');
        var key = decodeURIComponent(tempArr[0]);
        var val = decodeURIComponent(tempArr[1]);
        obj[key] = val;
    });
    return obj;
}
function getParamsStr(params) {
    if (params) {
        var urlp = paramsMap();
        $.each(urlp, function (k, v) {
            if (params.hasOwnProperty(k)) {
                params[k] = v;
            }
        });

        return cpParams(params);
    }
    return "";
}
function getChartsData(prop, callback) {
    var other = prop.other || {};
    var data = prop.data;
    var params = prop.params;
    var urlParams = getParamsStr(params);
    if (other.datatime && other.datatime > 0) {
        var t = setInterval(function () {
            if (other.dataFrom == 1) {
                callback.call(this, globalData);
            } else if (other.dataFrom == 2) {
                $.ajax({
                    url: "../getJSONDataByUrl",
                    type: 'post',
                    data: {
                        url: data.link + "?" + urlParams
                    },
                    dataType: 'json',
                    async: true,
                    success: function (res) {// 返回数据根据结果进行相应的处理
                        callback.call(this, res);
                    }
                });
            } else if (other.dataFrom == 3) {
                $.ajax({
                    type: "GET", // 提交方式
                    url: data.link,// 路径
                    dataType: 'json',
                    async: true,
                    success: function (res) {// 返回数据根据结果进行相应的处理
                        callback.call(this, res);
                    }
                });
            } else if (other.dataFrom == 4) {
                $.ajax({
                    type: "GET", // 提交方式
                    url: data.link,// 路径
                    async: true,
                    data: {
                        params: JSON.stringify(params)
                    },
                    dataType: 'json',
                    success: function (res) {// 返回数据根据结果进行相应的处理
                        callback.call(this, res);
                    }
                });
            }
        }, other.datatime);
    }
    if (other.dataFrom == 1) {
        callback.call(this, globalData);
    } else if (other.dataFrom == 2) {
        $.ajax({
            url: "../getJSONDataByUrl",
            type: 'post',
            data: {
                url: data.link + "?" + urlParams
            },
            dataType: 'json',
            async: true,
            success: function (res) {// 返回数据根据结果进行相应的处理
                callback.call(this, res);
            }
        });
    } else if (other.dataFrom == 4) {
        $.ajax({
            type: "GET", // 提交方式
            url: data.link,// 路径
            async: true,
            data: {
                params: JSON.stringify(params)
            },
            dataType: 'json',
            success: function (res) {// 返回数据根据结果进行相应的处理
                callback.call(this, res);
            }
        });
    } else if (other.dataFrom == 3) {
        try {
            $.ajax({
                type: "GET", // 提交方式
                url: data.link,// 路径
                async: true,
                dataType: 'json',
                success: function (res) {// 返回数据根据结果进行相应的处理
                    callback.call(this, res);
                }
            });
        } catch (err) {
            console.log(err);
        }
    } else {
        callback.call(this);
    }
}
function getFileName(o) {
    var pos = o.lastIndexOf("bddpConfig");
    return o.substring(pos);
    // return path.replace(/^.+?\\([^\\]+?)(.[^.\\]*?)?$/gi, "$1");
    // //正则表达式获取文件名，不带后缀
}
// 初始化折线图
function bulidLineChart(prop, options, charts, callback) {
    var data = prop.data;
    getChartsData(prop, function (res) {
        if (res) {
            options = getOptions(prop, options);
            options.legend = options.legend || {};
            options.legend.data = options.legend.data || [];
            options.series = options.series || [];
            var dimensionVals = getJsonValue(res, data.dimension[0].keyname);
            $.each(data.series, function (i, node) {

                var seriesVals = getJsonValue(res, node.keyname);
                var series = {
                    data: seriesVals,
                  //  type: prop.type,
                    name: node.displayname
                }
                // options.series[i].data = seriesVals;
                if (options.series[i]) {
                    options.series[i] = $.extend({}, options.series[i], series);
                } else {
                    options.series.push(series);
                }
                if (options.legend.data[i]) {
                    options.legend.data[i] = node.displayname;
                } else {
                    options.legend.data.push(node.displayname);
                }
            });
            options.xAxis.data = dimensionVals;
            charts.setOption(options);
            if (callback) {
                callback.call(this);
            }
        }
    });
}

function bulidBarChart(prop, options, charts, callback) {

    var data = prop.data;
    var other = prop.other || {};
    getChartsData(prop, function (res) {
        if (res) {
            options = getOptions(prop, options);
            options.legend = options.legend || {};
            options.legend.data = options.legend.data || [];
            options.series = options.series || [];
            var dimensionVals = getJsonValue(res, data.dimension[0].keyname);
            $.each(data.series, function (i, node) {
                var seriesVals = getJsonValue(res, node.keyname);
                var series = {
                    data: seriesVals,
                    type: prop.type,
                    name: node.displayname
                }
                if (options.series[i]) {
                    options.series[i] = $.extend({}, options.series[i], series);
                } else {
                    options.series.push(series);
                }
                if (options.legend.data[i]) {
                    options.legend.data[i] = node.displayname;
                } else {
                    options.legend.data.push(node.displayname);
                }
                // options.series[i].data = seriesVals;
            });
            if (other.axis) {
                options.yAxis.data = dimensionVals;
            } else {
                options.xAxis.data = dimensionVals;
            }
            charts.setOption(options);
            if (callback) {
                callback.call(this);
            }
        }
    });
}

function bulidPieChart(prop, options, charts, callback) {
    var data = prop.data;
    getChartsData(prop, function (res) {
        if (res) {
            options = getOptions(prop, options);
            options.legend = options.legend || {};
            options.legend.data = options.legend.data || [];
            options.series = options.series || [];
            var dimensionVals = getJsonValue(res, data.dimension[0].keyname);
            var seriesVals = getJsonValue(res, data.series[0].keyname);
            var seriesdata = [];

            for (var i = 0; i < dimensionVals.length; i++) {
                var obj = {
                    name: dimensionVals[i],
                    value: seriesVals[i]
                }
                if (options.legend.data[i]) {
                    options.legend.data[i] = dimensionVals[i];
                } else {
                    options.legend.data.push(dimensionVals[i]);
                }
                seriesdata.push(obj);
            }
            var series = {
                data: seriesdata,
                type: prop.type
            }
            if (options.series[0]) {
                options.series[0] = $.extend({}, options.series[0], series);
            } else {
                options.series.push(series);
            }
            charts.setOption(options);
            if (callback) {
                callback.call(this);
            }
        }
    });
}

function bulidRadarChart(prop, options, charts, callback) {
    var data = prop.data;
    getChartsData(prop, function (res) {
        if (res) {
            options = getOptions(prop, options);
            options.legend = options.legend || {};
            options.legend.data = options.legend.data || [];
            options.series = options.series || [];
            options.radar = options.radar || {};
            options.radar.indicator = options.radar.indicator || [];
            var dimensionVals = getJsonValue(res, data.dimension[0].keyname);
            var seriesVals = getJsonValue(res, data.series[0].keyname);
            var tempObj = {};
            var max = 0;

            $.each(seriesVals, function (i, node) {
                var series = {
                    data: [],
                    type: prop.type
                }
                var obj = {
                    name: dimensionVals[i],
                    value: []
                };
                if (options.legend.data[i]) {
                    options.legend.data[i] = dimensionVals[i];
                } else {
                    options.legend.data.push(dimensionVals[i]);
                }
                $.each(node, function (j, sub) {
                    tempObj[sub.indicator] = sub.value;
                    max = Number(max) > Number(sub.value) ? max : Number(sub.value);
                    obj.value.push(sub.value);

                })
                series.data.push(obj);
                if (options.series[i]) {
                    options.series[i] = $.extend({}, options.series[i], series);
                } else {
                    options.series.push(series);
                }
            });
            var count = 0;
            $.each(tempObj, function (k, v) {
                if (options.radar.indicator[count]) {
                    options.radar.indicator[count] = $.extend({}, {
                        name: k,
                        max: max
                    }, options.radar.indicator[count])
                } else {
                    options.radar.indicator.push({
                        name: k,
                        max: max
                    });
                }
                count++;
            });

            charts.setOption(options);
            if (callback) {
                callback.call(this);
            }
        }
    });
}

function bulidTreeChart(prop, options, charts, callback) {
    var data = prop.data;
    getChartsData(prop, function (res) {
        if (res) {
            options = getOptions(prop, options);
            var seriesVals = getJsonValue(res, data.series[0].keyname);
            var series = {
                data: [seriesVals],
                type: prop.type
            }
            options.series = $.extend({}, options.series[0], series);

            charts.setOption(options);
            if (callback) {
                callback.call(this);
            }
        }
    });
}

function bulidTreemapChart(prop, options, charts, callback) {
    var data = prop.data;
    getChartsData(prop, function (res) {
        if (res) {
            options = getOptions(prop, options);
            var seriesVals = getJsonValue(res, data.series[0].keyname);
            var series = {
                data: [seriesVals],
                type: prop.type
            }
            options.series = $.extend({}, options.series[0], series);

            charts.setOption(options);
            if (callback) {
                callback.call(this);
            }
        }
    });
}

function bulidSunburstChart(prop, options, charts, callback) {
    var data = prop.data;
    getChartsData(prop, function (res) {
        if (res) {
            options = getOptions(prop, options);
            var seriesVals = getJsonValue(res, data.series[0].keyname);
            var series = {
                data: [seriesVals],
                type: prop.type
            }
            options.series = $.extend({}, options.series[0], series);

            charts.setOption(options);
            if (callback) {
                callback.call(this);
            }
        }
    });
}

function bulidFunnelChart(prop, options, charts, callback) {
    var data = prop.data;
    getChartsData(prop, function (res) {
        if (res) {
            options = getOptions(prop, options);
            var seriesVals = getJsonValue(res, data.series[0].keyname);
            $.each(seriesVals, function (i, node) {
                node.type = prop.type;
                options.series[i] = node;
            })
            charts.setOption(options);
            if (callback) {
                callback.call(this);
            }
        }
    });
}

function bulidGaugeChart(prop, options, charts, callback) {
    var data = prop.data;
    var other = prop.other;
    getChartsData(prop, function (res) {
        if (res) {
            options = getOptions(prop, options);
            var seriesVals = getJsonValue(res, data.series[0].keyname);
            $.each(seriesVals, function (i, node) {
                var series = {};
                if (other.dataFrom == 4) {

                    series = {
                        data: [{
                            value: node
                        }]
                    };

                } else {
                    series = node;

                }
                series.type = prop.type;
                if (options.series[i]) {
                    options.series[i] = $.extend({}, options.series[i], series);
                } else {
                    options.series.push(series);
                }

                // node.type = prop.type;
                // options.series[i]= $.extend(options.series[i],node);
            })
            charts.setOption(options);
            if (callback) {
                callback.call(this);
            }
        }
    });
}

function bulidMapChart(prop, options, charts, callback) {
    var data = prop.data;
    getChartsData(prop, function (res) {
        if (res) {
            var count = 0;
            options = getOptions(prop, options);
            $.each(data.dimension, function (i, node) {
                var seriesVals = getJsonValue(res, node.keyname);
                options.series[count++].data = seriesVals;
            });
            $.each(data.series, function (i, node) {
                var seriesVals = getJsonValue(res, node.keyname);
                options.series[count++].data = seriesVals;
            });
            charts.setOption(options);
            if (callback) {
                callback.call(this);
            }
        }
    });
}
function bulidTextTag(prop, selector, callback) {
    var data = prop.data;
    getChartsData(prop, function (res) {
        if (res) {
            if (data.dimension && data.dimension.length > 0) {
                var textVal = getJsonValue(res, data.dimension[0].keyname);
                if (prop.parts && prop.parts.format) {
                    textVal = prop.parts.format.replace(/{val}/g, textVal);
                }
                $(selector).html(textVal);
                if (callback) {
                    callback.call(this);
                }
            }
        }
    });
}
function bulidTableTag(prop, charts, callback) {
    var data = prop.data;
    getChartsData(prop, function (res) {
        if (res) {
            var data = prop.data;
            var columnData = getJsonValue(res, data.dimension[0].keyname);
            var responseData = getJsonValue(res, data.series[0].keyname);
            var tableHeight = prop.parts === undefined ? null : (prop.parts.tableHeight || null)
            var gmOptions = {
                ajax_data: responseData,
                ajax_type: 'POST',
                supportCheckbox: false,
                supportAutoOrder: false,
                height: '100%',
                width: '100%',
                tableHeight: tableHeight,
                columnData: columnData
            };
            try {
                $(charts).initScroll(gmOptions);
                setTableStyle(prop, $(charts));
            } catch (error) {
                console.log(error,"列表加载失败");
            }
           
            if (callback) {
                callback.call(this);
            }
        }
    });
}
function ebulidDetailNolabel(prop, callback) {
    getChartsData(prop, function (res) {
        if (res) {
            bulidDetailNolabel(prop,res);
            if (callback) {
                callback.call(this);
            }
        }
    });
}
function ebulidDetail(prop, callback) {
    getChartsData(prop, function (res) {
        if (res) {
            bulidDetail(prop,res);
            if (callback) {
                callback.call(this);
            }
        }
    });
}
function ebulidDetailIcon(prop, callback) {
    getChartsData(prop, function (res) {
        if (res) {
            bulidDetailIcon(prop,res);
            if (callback) {
                callback.call(this);
            }
        }
    });
}
function ebulidDetailImg(prop, callback) {
    getChartsData(prop, function (res) {
        if (res) {
            bulidDetailImg(prop,res);
            if (callback) {
                callback.call(this);
            }
        }
    });
}
function ebulidDetailH(prop, callback) {
    getChartsData(prop, function (res) {
        if (res) {
            bulidDetailH(prop,res);
            if (callback) {
                callback.call(this);
            }
        }
    });
}
function ebulidDetailTime(prop, callback) {
    getChartsData(prop, function (res) {
        if (res) {
            bulidDetailTime(prop,res);
            if (callback) {
                callback.call(this);
            }
        }
    });
}
function bulidHeadtable(prop, charts, callback) {
    getChartsData(prop, function (res) {
        if (res) {
            var data = prop.data;
            var columnData = getJsonValue(res, data.dimension[0].keyname);
            var responseData = getJsonValue(res, data.series[0].keyname);
            $.fn.autoHeader.init({
                laynum: 5,
                headJson: columnData,
                dataJson: responseData,
                tableid: charts,
                needsort: true
            });
            setTableStyle(prop, $(charts));
            if (callback) {
                callback.call(this);
            }
        }
    });
}

function setTableStyle(prop, box) {
    var styles = prop.table;
    if (!styles) { return false; }
    $.each(styles, function (k, val) {
        switch (k) {
            case "titlefontsize":
                if (prop.type == "table") {
                    box.find(".kgo-scroll-head").css("font-size", val + "px");
                } else {
                    box.find("#autohead_thead").css("font-size", val + "px");

                }

                break;
            case "bodyfontsize":
                if (prop.type == "table") {
                    box.find(".baseStyle-data").css("font-size", val + "px");

                } else {
                    box.find("#autohead_tbody > tr >td").css("font-size", val + "px");

                }
                break;
            case "titlefontcolor":
                if (prop.type == "table") {
                    box.find(".baseStyle").css("color", val);
                } else {
                    box.find("#autohead_thead > tr >th").css("color", val);

                }
                break;
            case "bodyfontcolor":
                if (prop.type == "table") {
                    box.find(".baseStyle-data").css("color", val);
                } else {
                    box.find("#autohead_tbody > tr >td").css("color", val);

                }
                break;
            case "titlebgcolor":
                if (prop.type == "table") {
                    box.find(".kgo-scroll-head").css("background-color", val);
                } else {
                    box.find("#autohead_thead").css("background-color", val);

                }
                break;
            case "bodybgcolor":
                if (prop.type == "table") {
                    box.find(".kgo-scroll-body").css("background-color", val);
                } else {
                    box.find("#autohead_tbody").css("background-color", val);

                }
                break;
            case "bordercolor":
                if (prop.type == "table") {
                    box.find(".kgo-scroll-sty").css("border-color", val);
                    box.find(".kgo-scroll-body li").css("border-color", val);
                    box.find(".kgo-scroll-head").css("border-bottom-color", val);

                } else {
                    box.find("#autohead_tbody > tr >td").css("border", "1px solid " + val);
                    box.find("#autohead_thead > tr >th").css("border", "1px solid " + val);
                }
                break;
            default:
                break;
        }
    })
}

function bulidFilterY(prop, callback) {
    laydate.render({
        elem: $("#tag-" + prop.id)[0]
        , type: 'year'
    });
    if (callback) {
        callback.call(this);
    }
}
function bulidFilterYM(prop, callback) {
    laydate.render({
        elem: $("#tag-" + prop.id)[0]
        , type: 'month'
    });
    if (callback) {
        callback.call(this);
    }
}
function bulidFilterDate(prop, callback) {
    laydate.render({
        elem: $("#tag-" + prop.id)[0]
    });
    if (callback) {
        callback.call(this);
    }
}
function bulidFilterYRang(prop, callback) {
    laydate.render({
        elem: $("#tag-" + prop.id)[0]
        , range: true
    });
    if (callback) {
        callback.call(this);
    }
}
function bulidFilterYMRang(prop, callback) {
    laydate.render({
        elem: $("#tag-" + prop.id)[0]
        , range: true
    });
    if (callback) {
        callback.call(this);
    }
}
function bulidFilterDateRang(prop, callback) {
    laydate.render({
        elem: $("#tag-" + prop.id)[0]
        , range: true
    });
    if (callback) {
        callback.call(this);
    }
}




function getOptions(prop, options) {
    if (prop.optionsText && typeof (prop.optionsText) == "string") {
        options = eval("(" + prop.optionsText + ")");
    } else if (prop.optionsText && typeof (prop.optionsText) == "object") {
        options = prop.optionsText;
    }
    return options;
}
function getJsonValue(json, key) {
    var rjson;
    var keys = key.split(".");
    var obj = json[keys[0]];
    if (Object.prototype.toString.apply(obj) === "[object Array]" && keys.length > 1) {
        rjson = getJsonArray(obj, 0, keys);
    } else if (Object.prototype.toString.apply(obj) === "[object Object]" && keys.length > 1) {
        rjson = getJsonObject(obj, 0, keys);
    } else {
        rjson = obj;
    }
    return rjson;
}

function getJsonObject(json, index, keys) {
    if (index < keys.length) {
        var obj = json[keys[index + 1]];
        if (Object.prototype.toString.apply(obj) === "[object Array]" && (index + 1) < (keys.length - 1)) {
            return getJsonArray(obj, index + 1, keys);
        } else if (Object.prototype.toString.apply(obj) === "[object Object]" && (index + 1) < (keys.length - 1)) {
            return getJsonObject(obj, index + 1, keys);
        } else {
            return obj;
        }
    }
}

function getJsonArray(json, index, keys) {
    var rjson = [];
    $.each(json, function (i, node) {
        if (index < keys.length - 1) {
            var obj = node[keys[index + 1]];
            if (Object.prototype.toString.apply(obj) === '[object Array]') {
                rjson.push(getJsonArray(obj, index + 1, keys));
            } else if (Object.prototype.toString.apply(obj) === '[object Object]') {
                rjson.push(getJsonObject(obj, index + 1, keys));
            } else {
                rjson.push(obj);
            }
        } else {
            rjson.push(node);
        }
    });
    return rjson;
}
